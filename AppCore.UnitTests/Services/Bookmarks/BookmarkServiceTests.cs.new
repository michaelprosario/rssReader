// filepath: /workspaces/rssReader/AppCore.UnitTests/Services/Bookmarks/BookmarkServiceTests.cs
using AppCore.Models;
using AppCore.Models.Bookmarks;
using AppCore.Models.Tags;
using AppCore.Repositories;
using AppCore.Services.Bookmarks;
using AppCore.UnitTests.Mocks;
using FluentAssertions;
using FluentValidation;
using FluentValidation.Results;
using NSubstitute;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace AppCore.UnitTests.Services.Bookmarks
{
    [TestFixture]
    public class BookmarkServiceTests
    {
        private IRepository<Bookmark> _bookmarkRepository;
        private IRepository<Article> _articleRepository;
        private IRepository<Tag> _tagRepository;
        private IRepository<BookmarkTag> _bookmarkTagRepository;
        private IValidator<Bookmark> _bookmarkValidator;
        private BookmarkService _bookmarkService;

        [SetUp]
        public void Setup()
        {
            // Initialize repositories
            _bookmarkRepository = new MockRepository<Bookmark>();
            _articleRepository = new MockRepository<Article>();
            _tagRepository = new MockRepository<Tag>();
            _bookmarkTagRepository = new MockRepository<BookmarkTag>();
            
            // Create mock validator
            _bookmarkValidator = Substitute.For<IValidator<Bookmark>>();
            
            // Default setup for validator - validation passes by default
            _bookmarkValidator.Validate(Arg.Any<Bookmark>())
                .Returns(new ValidationResult());
            
            // Create service
            _bookmarkService = new BookmarkService(
                _bookmarkRepository, 
                _articleRepository,
                _tagRepository,
                _bookmarkTagRepository,
                _bookmarkValidator
            );
        }

        [Test]
        public async Task AddAsync_ValidBookmark_AddsBookmark()
        {
            // Arrange
            var articleId = Guid.NewGuid();
            // Create an article first
            var article = new Article 
            { 
                Id = articleId,
                Title = "Test Article"
            };
            await _articleRepository.AddAsync(article);
            
            var bookmark = new Bookmark
            {
                Title = "Test Bookmark",
                ArticleId = articleId
            };

            // Act
            var result = await _bookmarkService.AddAsync(bookmark);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().NotBe(Guid.Empty);
            result.Title.Should().Be("Test Bookmark");
            result.ArticleId.Should().Be(articleId);
            
            // Verify it was added to the repository
            var savedBookmark = await _bookmarkRepository.GetByIdAsync(result.Id);
            savedBookmark.Should().NotBeNull();
            savedBookmark!.Title.Should().Be("Test Bookmark");
        }

        [Test]
        public void AddAsync_InvalidBookmark_ThrowsValidationException()
        {
            // Arrange
            var bookmark = new Bookmark
            {
                // Missing required fields
            };
            
            // Configure validator to fail
            var validationFailure = new ValidationFailure("Title", "Title is required");
            var validationResult = new ValidationResult(new[] { validationFailure });
            _bookmarkValidator.Validate(Arg.Any<Bookmark>()).Returns(validationResult);

            // Act & Assert
            Func<Task> act = async () => await _bookmarkService.AddAsync(bookmark);
            act.Should().ThrowAsync<ValidationException>();
        }

        [Test]
        public async Task GetByArticleIdAsync_ExistingArticle_ReturnsBookmark()
        {
            // Arrange
            var articleId = Guid.NewGuid();
            // Create an article first
            var article = new Article 
            { 
                Id = articleId,
                Title = "Test Article"
            };
            await _articleRepository.AddAsync(article);
            
            var bookmark = new Bookmark
            {
                Title = "Existing Bookmark",
                ArticleId = articleId
            };
            
            await _bookmarkRepository.AddAsync(bookmark);

            // Act
            var result = await _bookmarkService.GetByArticleIdAsync(articleId);

            // Assert
            result.Should().NotBeNull();
            result!.ArticleId.Should().Be(articleId);
            result.Title.Should().Be("Existing Bookmark");
        }

        [Test]
        public async Task BookmarkArticleAsync_ValidArticle_CreatesBookmark()
        {
            // Arrange
            var articleId = Guid.NewGuid();
            var article = new Article
            {
                Id = articleId,
                Title = "Test Article"
            };
            await _articleRepository.AddAsync(article);
            
            // Act
            var result = await _bookmarkService.BookmarkArticleAsync(articleId, "Test notes");
            
            // Assert
            result.Should().NotBeNull();
            result!.ArticleId.Should().Be(articleId);
            result.Notes.Should().Be("Test notes");
            
            // Verify bookmark was created
            var bookmarks = await _bookmarkRepository.FindAsync(b => b.ArticleId == articleId);
            bookmarks.Should().HaveCount(1);
        }
        
        [Test]
        public async Task AddTagsToBookmarkAsync_ValidBookmarkAndTags_AddsTags()
        {
            // Arrange
            var bookmark = new Bookmark
            {
                Title = "Test Bookmark",
                ArticleId = Guid.NewGuid()
            };
            bookmark = await _bookmarkRepository.AddAsync(bookmark);
            var bookmarkId = bookmark.Id;
            
            var tag1 = new Tag { Name = "Tag1" };
            var tag2 = new Tag { Name = "Tag2" };
            tag1 = await _tagRepository.AddAsync(tag1);
            tag2 = await _tagRepository.AddAsync(tag2);
            
            var tagIds = new[] { tag1.Id, tag2.Id };
            
            // Act
            var result = await _bookmarkService.AddTagsToBookmarkAsync(bookmarkId, tagIds);
            
            // Assert - We can't directly check bookmark.Tags as they're not loaded in our mock
            // But we can verify the relationships were created
            var bookmarkTags = await _bookmarkTagRepository.FindAsync(bt => bt.BookmarkId == bookmarkId);
            bookmarkTags.Should().HaveCount(2);
            bookmarkTags.Any(bt => bt.TagId == tag1.Id).Should().BeTrue();
            bookmarkTags.Any(bt => bt.TagId == tag2.Id).Should().BeTrue();
        }
        
        [Test]
        public async Task RemoveTagsFromBookmarkAsync_ValidBookmarkAndTags_RemovesTags()
        {
            // Arrange
            var bookmark = new Bookmark
            {
                Title = "Test Bookmark",
                ArticleId = Guid.NewGuid()
            };
            bookmark = await _bookmarkRepository.AddAsync(bookmark);
            var bookmarkId = bookmark.Id;
            
            var tag1 = new Tag { Name = "Tag1" };
            var tag2 = new Tag { Name = "Tag2" };
            tag1 = await _tagRepository.AddAsync(tag1);
            tag2 = await _tagRepository.AddAsync(tag2);
            
            // Add tags to bookmark
            await _bookmarkTagRepository.AddAsync(new BookmarkTag { BookmarkId = bookmarkId, TagId = tag1.Id });
            await _bookmarkTagRepository.AddAsync(new BookmarkTag { BookmarkId = bookmarkId, TagId = tag2.Id });
            
            // Act - remove one tag
            var result = await _bookmarkService.RemoveTagsFromBookmarkAsync(bookmarkId, new[] { tag1.Id });
            
            // Assert
            // Verify relationship was removed
            var bookmarkTags = await _bookmarkTagRepository.FindAsync(bt => bt.BookmarkId == bookmarkId);
            bookmarkTags.Should().HaveCount(1);
            bookmarkTags.Any(bt => bt.TagId == tag1.Id).Should().BeFalse();
            bookmarkTags.Any(bt => bt.TagId == tag2.Id).Should().BeTrue();
        }
        
        [Test]
        public async Task GetBookmarksByTagAsync_ValidTag_ReturnsMatchingBookmarks()
        {
            // Arrange
            var tag = new Tag { Name = "Programming" };
            tag = await _tagRepository.AddAsync(tag);
            var tagId = tag.Id;
            
            var bookmark1 = new Bookmark { Title = "Bookmark1", ArticleId = Guid.NewGuid() };
            var bookmark2 = new Bookmark { Title = "Bookmark2", ArticleId = Guid.NewGuid() };
            bookmark1 = await _bookmarkRepository.AddAsync(bookmark1);
            bookmark2 = await _bookmarkRepository.AddAsync(bookmark2);
            
            // Only link tag to first bookmark
            await _bookmarkTagRepository.AddAsync(new BookmarkTag { BookmarkId = bookmark1.Id, TagId = tagId });
            
            // Act
            var result = await _bookmarkService.GetBookmarksByTagAsync(tagId);
            
            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(1);
            result.First().Title.Should().Be("Bookmark1");
        }
        
        [Test]
        public async Task DeleteAsync_ExistingBookmark_DeletesBookmark()
        {
            // Arrange
            var bookmark = new Bookmark
            {
                Title = "Test Bookmark",
                ArticleId = Guid.NewGuid()
            };
            bookmark = await _bookmarkRepository.AddAsync(bookmark);
            var bookmarkId = bookmark.Id;
            
            // Act
            var result = await _bookmarkService.DeleteAsync(bookmarkId);
            
            // Assert
            result.Should().BeTrue();
            
            // Verify bookmark is deleted
            var deletedBookmark = await _bookmarkRepository.GetByIdAsync(bookmarkId);
            deletedBookmark.Should().BeNull();
        }
    }
}
