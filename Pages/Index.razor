@page "/"
@inject IFeedService FeedService
@inject IArticleService ArticleService
@inject ISettingsService SettingsService
@implements IDisposable

<PageTitle>RSS Reader - Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3>Dashboard</h3>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-4">
                        <h4>Your RSS Feeds</h4>
                        <div>
                            <button class="btn btn-primary me-2" @onclick="RefreshAllFeeds">
                                <i class="oi oi-reload"></i> Refresh All
                            </button>
                            <a href="/feeds/add" class="btn btn-success">
                                <i class="oi oi-plus"></i> Add Feed
                            </a>
                        </div>
                    </div>
                    
                    @if (isLoading)
                    {
                        <div class="text-center my-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Loading feeds...</p>
                        </div>
                    }
                    else if (!feeds.Any())
                    {
                        <div class="alert alert-info">
                            <p>You don't have any feeds yet. Start by adding a feed!</p>
                            <a href="/feeds/add" class="btn btn-primary">Add your first feed</a>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            @foreach (var feed in feeds)
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100">
                                        <div class="card-header d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(feed.LogoUrl))
                                            {
                                                <img src="@feed.LogoUrl" alt="@feed.Title" class="feed-logo me-2" />
                                            }
                                            else
                                            {
                                                <i class="oi oi-rss me-2"></i>
                                            }
                                            <h5 class="mb-0 text-truncate">@feed.Title</h5>
                                        </div>
                                        <div class="card-body">
                                            @if (!string.IsNullOrEmpty(feed.Description))
                                            {
                                                <p class="text-muted feed-description">@feed.Description</p>
                                            }
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span class="badge bg-@(feed.UnreadCount > 0 ? "primary" : "secondary")">
                                                    @feed.UnreadCount unread
                                                </span>
                                                <small class="text-muted">Updated: @feed.LastUpdated.ToString("g")</small>
                                            </div>
                                        </div>
                                        <div class="card-footer">
                                            <div class="btn-group w-100">
                                                <a href="/feeds/@feed.Id" class="btn btn-sm btn-outline-primary">
                                                    View Articles
                                                </a>
                                                <button @onclick="() => RefreshFeed(feed.Id)" class="btn btn-sm btn-outline-secondary">
                                                    <i class="oi oi-reload"></i> 
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h4>Recent Articles</h4>
                </div>
                <div class="card-body p-0">
                    @if (recentArticles.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var article in recentArticles)
                            {
                                <a href="/article/@article.Id" class="list-group-item list-group-item-action @(!article.IsRead ? "fw-bold unread-item" : "")">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1 text-truncate">@article.Title</h6>
                                        <small>@article.PublishDate.ToString("MMM d")</small>
                                    </div>
                                    <small class="text-muted">@article.FeedTitle</small>
                                </a>
                            }
                        </div>
                        <div class="card-footer text-center">
                            <a href="/articles" class="btn btn-sm btn-outline-primary">View All Articles</a>
                        </div>
                    }
                    else
                    {
                        <div class="p-3 text-center">
                            <p class="text-muted">No articles available.</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h4>Recent Bookmarks</h4>
                </div>
                <div class="card-body p-0">
                    @if (recentBookmarks.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var bookmark in recentBookmarks)
                            {
                                <a href="/article/@bookmark.Id" class="list-group-item list-group-item-action">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1 text-truncate">@bookmark.Title</h6>
                                        <small>@bookmark.BookmarkDate?.ToString("MMM d")</small>
                                    </div>
                                    <small class="text-muted">@bookmark.FeedTitle</small>
                                </a>
                            }
                        </div>
                        <div class="card-footer text-center">
                            <a href="/bookmarks" class="btn btn-sm btn-outline-primary">View All Bookmarks</a>
                        </div>
                    }
                    else
                    {
                        <div class="p-3 text-center">
                            <p class="text-muted">No bookmarks available.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showRefreshNotification)
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="oi oi-check me-2 text-success"></i>
                <strong class="me-auto">RSS Reader</strong>
                <button type="button" class="btn-close" @onclick="DismissNotification"></button>
            </div>
            <div class="toast-body">
                @refreshNotificationMessage
            </div>
        </div>
    </div>
}

@code {
    private List<Feed> feeds = new();
    private List<Article> recentArticles = new();
    private List<Article> recentBookmarks = new();
    private bool isLoading = true;
    private bool showRefreshNotification = false;
    private string refreshNotificationMessage = "";
    private System.Threading.Timer refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        
        // Set up a timer to refresh feeds periodically
        var settings = await SettingsService.GetSettingsAsync();
        var interval = settings.GlobalRefreshIntervalMinutes * 60 * 1000; // Convert minutes to milliseconds
        
        refreshTimer = new System.Threading.Timer(
            async _ => await RefreshTimerCallback(), 
            null, 
            interval, 
            interval
        );
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        
        try
        {
            feeds = await FeedService.GetAllFeedsAsync();
            
            // Get recent unread articles
            recentArticles = await ArticleService.GetArticlesAsync(unreadOnly: true);
            recentArticles = recentArticles.Take(10).ToList();
            
            // Get recent bookmarks
            recentBookmarks = await ArticleService.GetBookmarkedArticlesAsync();
            recentBookmarks = recentBookmarks.Take(10).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        
        isLoading = false;
    }

    private async Task RefreshAllFeeds()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            int newArticles = await FeedService.RefreshFeedsAsync();
            
            refreshNotificationMessage = newArticles > 0 
                ? $"Successfully refreshed feeds. Found {newArticles} new articles." 
                : "Feeds refreshed. No new articles found.";
                
            showRefreshNotification = true;
            
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            refreshNotificationMessage = $"Error refreshing feeds: {ex.Message}";
            showRefreshNotification = true;
        }
        
        isLoading = false;
    }

    private async Task RefreshFeed(string feedId)
    {
        try
        {
            var feed = await FeedService.GetFeedByIdAsync(feedId);
            if (feed != null)
            {
                int newArticles = await FeedService.RefreshFeedsAsync(feedId);
                
                refreshNotificationMessage = newArticles > 0 
                    ? $"Refreshed {feed.Title}. Found {newArticles} new articles." 
                    : $"Refreshed {feed.Title}. No new articles found.";
                    
                showRefreshNotification = true;
                
                await LoadDataAsync();
            }
        }
        catch (Exception ex)
        {
            refreshNotificationMessage = $"Error refreshing feed: {ex.Message}";
            showRefreshNotification = true;
        }
    }

    private void DismissNotification()
    {
        showRefreshNotification = false;
    }

    private async Task RefreshTimerCallback()
    {
        try
        {
            int newArticles = await FeedService.RefreshFeedsAsync();
            
            if (newArticles > 0)
            {
                refreshNotificationMessage = $"Background refresh complete. Found {newArticles} new articles.";
                showRefreshNotification = true;
                
                await InvokeAsync(async () => 
                {
                    await LoadDataAsync();
                    StateHasChanged();
                });
            }
        }
        catch
        {
            // Silent fail for background refresh
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}

<style>
    .feed-logo {
        max-width: 24px;
        max-height: 24px;
    }
    
    .feed-description {
        max-height: 60px;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
    }
    
    .unread-item {
        border-left: 4px solid #0d6efd;
    }
</style>
