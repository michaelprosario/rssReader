@page "/feeds/add"
@inject IFeedService FeedService
@inject NavigationManager NavigationManager

<PageTitle>Add Feed - RSS Reader</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3>Add New Feed</h3>
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <ul class="nav nav-tabs" id="feedTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link @(activeTab == "url" ? "active" : "")" 
                                        @onclick="() => activeTab = "url"">
                                    Add by URL
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link @(activeTab == "discover" ? "active" : "")"
                                        @onclick="() => activeTab = "discover"">
                                    Discover Feeds
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link @(activeTab == "opml" ? "active" : "")"
                                        @onclick="() => activeTab = "opml"">
                                    Import OPML
                                </button>
                            </li>
                        </ul>
                    </div>

                    <div class="tab-content">
                        @if (activeTab == "url")
                        {
                            <div class="tab-pane fade show active">
                                <EditForm Model="@newFeed" OnValidSubmit="AddFeed">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-3">
                                        <label for="feed-url" class="form-label">Feed URL</label>
                                        <InputText id="feed-url" @bind-Value="newFeed.Url" class="form-control" 
                                                  placeholder="https://example.com/feed.xml" />
                                        <ValidationMessage For="@(() => newFeed.Url)" />
                                        <small class="form-text text-muted">
                                            Enter the URL of the RSS, Atom or JSON Feed.
                                        </small>
                                    </div>

                                    <div class="mb-3">
                                        <label for="feed-title" class="form-label">Title (Optional)</label>
                                        <InputText id="feed-title" @bind-Value="newFeed.Title" class="form-control" 
                                                  placeholder="My Awesome Feed" />
                                        <ValidationMessage For="@(() => newFeed.Title)" />
                                        <small class="form-text text-muted">
                                            If left blank, we'll use the title from the feed.
                                        </small>
                                    </div>

                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                            @if (isProcessing)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span class="ms-2">Processing...</span>
                                            }
                                            else
                                            {
                                                <span>Add Feed</span>
                                            }
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        }
                        else if (activeTab == "discover")
                        {
                            <div class="tab-pane fade show active">
                                <div class="mb-3">
                                    <label for="website-url" class="form-label">Website URL</label>
                                    <div class="input-group">
                                        <input id="website-url" @bind="websiteUrl" class="form-control" 
                                              placeholder="https://example.com" />
                                        <button class="btn btn-primary" @onclick="DiscoverFeeds" disabled="@isProcessing">
                                            @if (isProcessing)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            }
                                            else
                                            {
                                                <span>Discover</span>
                                            }
                                        </button>
                                    </div>
                                    <small class="form-text text-muted">
                                        Enter a website URL to automatically find available feeds.
                                    </small>
                                </div>

                                @if (discoveredFeeds.Any())
                                {
                                    <div class="mt-4">
                                        <h4>Discovered Feeds</h4>
                                        <div class="list-group">
                                            @foreach (var feed in discoveredFeeds)
                                            {
                                                <div class="list-group-item list-group-item-action">
                                                    <div class="d-flex w-100 justify-content-between">
                                                        <h5 class="mb-1">@feed.Title</h5>
                                                        <small>@feed.Format.ToString()</small>
                                                    </div>
                                                    <p class="mb-1 text-truncate">@feed.Url</p>
                                                    <small>
                                                        <button class="btn btn-sm btn-outline-primary" 
                                                                @onclick="() => AddDiscoveredFeed(feed)"
                                                                disabled="@isProcessing">
                                                            Add Feed
                                                        </button>
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                else if (showNoFeedsMessage)
                                {
                                    <div class="alert alert-warning mt-3">
                                        No feeds discovered at the provided URL. Please try a different website.
                                    </div>
                                }
                            </div>
                        }
                        else if (activeTab == "opml")
                        {
                            <div class="tab-pane fade show active">
                                <div class="mb-3">
                                    <label for="opml-file" class="form-label">OPML File</label>
                                    <InputFile OnChange="UploadOpml" id="opml-file" class="form-control" />
                                    <small class="form-text text-muted">
                                        Upload an OPML file to import multiple feeds at once.
                                    </small>
                                </div>

                                @if (isImporting)
                                {
                                    <div class="mt-4">
                                        <div class="progress">
                                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                                 role="progressbar" style="width: 100%">
                                                Importing...
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (importResult != null)
                                {
                                    <div class="alert @(importResult.Success ? "alert-success" : "alert-danger") mt-3">
                                        @importResult.Message
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-4">
                            @errorMessage
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <a href="/" class="btn btn-outline-secondary">Back to Dashboard</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Feed newFeed = new Feed();
    private string activeTab = "url";
    private bool isProcessing = false;
    private string errorMessage = "";
    private string websiteUrl = "";
    private List<Feed> discoveredFeeds = new();
    private bool showNoFeedsMessage = false;
    private bool isImporting = false;
    private ImportResult importResult = null;

    private class ImportResult
    {
        public bool Success { get; set; }
        public string Message { get; set; }
    }

    private async Task AddFeed()
    {
        errorMessage = "";
        isProcessing = true;

        try
        {
            // If no title is provided, it will be filled by the feed service
            await FeedService.AddFeedByUrlAsync(newFeed.Url);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DiscoverFeeds()
    {
        if (string.IsNullOrWhiteSpace(websiteUrl))
        {
            errorMessage = "Please enter a website URL.";
            return;
        }

        errorMessage = "";
        isProcessing = true;
        discoveredFeeds.Clear();
        showNoFeedsMessage = false;

        try
        {
            discoveredFeeds = await FeedService.DiscoverFeedsAsync(websiteUrl);
            showNoFeedsMessage = !discoveredFeeds.Any();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task AddDiscoveredFeed(Feed feed)
    {
        errorMessage = "";
        isProcessing = true;

        try
        {
            await FeedService.AddFeedAsync(feed);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task UploadOpml(InputFileChangeEventArgs e)
    {
        errorMessage = "";
        isImporting = true;
        importResult = null;

        try
        {
            var file = e.File;
            if (file == null)
            {
                throw new Exception("No file selected.");
            }

            if (!file.Name.ToLower().EndsWith(".opml") && !file.ContentType.Contains("xml"))
            {
                throw new Exception("Please select a valid OPML file.");
            }

            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB limit
            int importCount = await FeedService.ImportOpmlAsync(stream);

            importResult = new ImportResult
            {
                Success = true,
                Message = importCount > 0 
                    ? $"Successfully imported {importCount} feeds." 
                    : "No feeds were imported. The file may be empty or contain only feeds you already have."
            };
        }
        catch (Exception ex)
        {
            importResult = new ImportResult
            {
                Success = false,
                Message = $"Error importing OPML file: {ex.Message}"
            };
        }
        finally
        {
            isImporting = false;
        }
    }
}
