@page "/settings"
@inject ISettingsService SettingsService
@inject IFeedService FeedService
@inject NavigationManager NavigationManager

<PageTitle>Settings - RSS Reader</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3>Settings</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center my-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Loading settings...</p>
                        </div>
                    }
                    else
                    {
                        <h4 class="mb-4">General Settings</h4>
                        
                        <EditForm Model="@settings" OnValidSubmit="SaveSettings">
                            <DataAnnotationsValidator />
                            
                            <div class="mb-3">
                                <label for="refreshInterval" class="form-label">Global Refresh Interval (minutes)</label>
                                <InputNumber id="refreshInterval" class="form-control" @bind-Value="settings.GlobalRefreshIntervalMinutes" min="5" max="1440" />
                                <small class="form-text text-muted">
                                    How often to check for new content (minimum 5 minutes, maximum 24 hours).
                                </small>
                            </div>
                            
                            <div class="mb-3 form-check">
                                <InputCheckbox id="autoFetchContent" class="form-check-input" @bind-Value="settings.AutoFetchFullContent" />
                                <label class="form-check-label" for="autoFetchContent">
                                    Automatically fetch full content for articles
                                </label>
                                <div class="form-text text-muted">
                                    When enabled, the app will try to download the full article content when feeds only provide summaries.
                                </div>
                            </div>
                            
                            <div class="mb-3 form-check">
                                <InputCheckbox id="autoMarkAsRead" class="form-check-input" @bind-Value="settings.AutoMarkAsRead" />
                                <label class="form-check-label" for="autoMarkAsRead">
                                    Automatically mark articles as read when viewed
                                </label>
                                <div class="form-text text-muted">
                                    Articles will be marked as read when you open them.
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="viewMode" class="form-label">Default Article View Mode</label>
                                <InputSelect id="viewMode" class="form-select" @bind-Value="settings.DefaultViewMode">
                                    <option value="@ViewMode.Normal">Normal</option>
                                    <option value="@ViewMode.Reader">Reader Mode</option>
                                </InputSelect>
                                <div class="form-text text-muted">
                                    Reader mode provides a clean, distraction-free reading experience.
                                </div>
                            </div>
                            
                            <div class="mb-3 form-check">
                                <InputCheckbox id="showPreviews" class="form-check-input" @bind-Value="settings.ShowArticlePreviews" />
                                <label class="form-check-label" for="showPreviews">
                                    Show article previews in feed view
                                </label>
                                <div class="form-text text-muted">
                                    Display article summaries in the feed list.
                                </div>
                            </div>
                            
                            <h4 class="mt-5 mb-4">Data Management</h4>
                            
                            <div class="mb-3">
                                <label for="dataDirectory" class="form-label">Data Storage Directory</label>
                                <InputText id="dataDirectory" class="form-control" @bind-Value="settings.DataDirectoryPath" />
                                <div class="form-text text-muted">
                                    Directory where your feed data is stored. Changing this will require a restart.
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                <button type="button" class="btn btn-danger" @onclick="ShowExportConfirm">
                                    Export All Data
                                </button>
                                <div class="form-text text-muted">
                                    Export all your feeds and articles as OPML and JSON files.
                                </div>
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Settings</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                        
                        @if (showMessage)
                        {
                            <div class="alert @(isError ? "alert-danger" : "alert-success") mt-4">
                                @message
                            </div>
                        }
                    }
                </div>
                <div class="card-footer">
                    <a href="/" class="btn btn-outline-secondary">Back to Dashboard</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private AppSettings settings = new AppSettings();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showMessage = false;
    private bool isError = false;
    private string message = "";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadSettingsAsync();
    }
    
    private async Task LoadSettingsAsync()
    {
        isLoading = true;
        
        try
        {
            settings = await SettingsService.GetSettingsAsync();
        }
        catch (Exception ex)
        {
            ShowError($"Error loading settings: {ex.Message}");
        }
        
        isLoading = false;
    }
    
    private async Task SaveSettings()
    {
        isSaving = true;
        showMessage = false;
        
        try
        {
            // Validate refresh interval
            if (settings.GlobalRefreshIntervalMinutes < 5)
            {
                settings.GlobalRefreshIntervalMinutes = 5;
            }
            else if (settings.GlobalRefreshIntervalMinutes > 1440)
            {
                settings.GlobalRefreshIntervalMinutes = 1440;
            }
            
            await SettingsService.UpdateSettingsAsync(settings);
            ShowSuccess("Settings saved successfully!");
        }
        catch (Exception ex)
        {
            ShowError($"Error saving settings: {ex.Message}");
        }
        
        isSaving = false;
    }
    
    private void ShowExportConfirm()
    {
        // For simplicity, we'll just export OPML directly
        ExportOpml();
    }
    
    private async Task ExportOpml()
    {
        try
        {
            await FeedService.ExportOpmlAsync();
            ShowSuccess("Feeds exported successfully!");
        }
        catch (Exception ex)
        {
            ShowError($"Error exporting feeds: {ex.Message}");
        }
    }
    
    private void ShowSuccess(string msg)
    {
        message = msg;
        showMessage = true;
        isError = false;
    }
    
    private void ShowError(string msg)
    {
        message = msg;
        showMessage = true;
        isError = true;
    }
}
